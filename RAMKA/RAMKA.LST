Turbo Assembler	 Version 4.1	    13/02/25 08:41:37	    Page 1
ramka.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .186
      4				     locals qq
      5				     org 100h
      6
      7				     ; ;-----------------DEBUG------------------------------
      8				     ;	     mov byte ptr es:[DEBUG_OFFSET], al
      9				     ;	     mov byte ptr es:[DEBUG_OFFSET+2], ah
     10				     ; ;-----------------DEBUG------------------------------
     11
     12	      =0370		     DEBUG_OFFSET	     equ 880
     13
     14				     ; Window
     15	      =B800		     VIDEOSEG			     equ 0b800h
     16	      =0050		     WC_WIDTH			     equ 80
     17	      =0019		     WC_HEIGHT			     equ 25
     18	      =000A		     GC_RAMKA_GAP	     equ 10
     19	      =0002		     VC_RAMKA_GAP	     equ 2
     20
     21				     ;Symbols
     22	      =000A		     SYM_LF			     equ 0ah
     23	      =000D		     SYM_CR			     equ 0dh
     24	      =0003		     SYM_HEART			     equ 03h
     25
     26				     ;Times
     27	      =001E		     TWO_SECONDS1	     equ 1eh
     28	      =8480		     TWO_SECONDS2	     equ 8480h
     29	      =000F		     ONE_SECONDS1	     equ 0fh
     30	      =4240		     ONE_SECONDS2	     equ 4240h
     31	      =0001		     HUNDRED_MSECONDS1	     equ 1h
     32	      =86A0		     HUNDRED_MSECONDS2	     equ 86A0h
     33	      =2710		     TEN_MSECONDS	     equ 2710h
     34
     35				     ;===================MAIN=========================
     36
     37	0100			     Start:
     38				     ;;; AH = max count	symbols	in text	line
     39				     ;;; AL = count \n text
     40	0100  BF 0009r			     mov di, offset Vstring
     41	0103  E8 003F			     call CountTextSizes
     42
     43				     ;;; Set num videoseg segment
     44	0106  B9 B800			     mov cx, VIDEOSEG
     45	0109  8E C1			     mov es, cx
     46
     47				     ;;; dh = |ah-al|, dl = min(ah, al)
     48	010B  8B D0			     mov dx, ax
     49	010D  80 C6 14			     add dh, GC_RAMKA_GAP*2
     50	0110  80 C2 04			     add dl, VC_RAMKA_GAP*2
     51	0113  E8 0100			     call MinMax
     52	0116  2A F2			     sub dh, dl
     53
     54				     ;;; Save text sizes
     55	0118  50			     push ax
     56
     57				     ;;; Set start ramka sizes in ah, al (min =	0)
Turbo Assembler	 Version 4.1	    13/02/25 08:41:37	    Page 2
ramka.asm



     58	0119  3A E0			     cmp ah, al
     59	011B  7C 07		     jl	qqDidSwap
     60	011D  8A E6			     mov ah, dh
     61	011F  32 C0			     xor al, al
     62	0121  EB 05 90		     jmp qqEndDidSwap
     63	0124			     qqDidSwap:
     64	0124  8A C6			     mov al, dh
     65	0126  32 E4			     xor ah, ah
     66	0128			     qqEndDidSwap:
     67
     68	0128  BF 0000r			     mov di, offset Vsymbols
     69
     70	012B  E8 0032			     call ZoomRamka
     71
     72	012E  E8 00A2			     call RamkaOffset
     73
     74				     ;;; Save text sizes
     75	0131  58			     pop ax
     76
     77	0132  53			     push bx
     78	0133  BF 0000r			     mov di, offset Vsymbols
     79	0136  E8 0049			     call PrintRamkaWithGap
     80	0139  5B			     pop bx
     81
     82	013A  BF 0009r			     mov di, offset Vstring
     83	013D  E8 00AE			     call PrintText
     84
     85	0140  B8 4C00			     mov ax, 4c00h; end	programm
     86	0143  CD 21			     int 21h
     87
     88				     ;=====================FUNCS===================
     89
     90				     ;---------------------------------------------
     91				     ;Descript:	     Count sizes of text with 0	in end
     92				     ;Entry:	     ES:DI = Start text
     93				     ;Exit:	     AH	= max count symbols in text line
     94				     ;			     AL	= count	text line
     95				     ;Destroy:	     DI, CL, DX
     96				     ;---------------------------------------------
     97	0145			     CountTextSizes  proc
     98
     99				     ;	     al	- sym
    100				     ;	     cl	- counter
    101				     ;	     dl	- new val in minmax
    102				     ;	     dh	- max
    103				     ;	     ah	- count	text line
    104
    105	0145  32 E4			     xor ah, ah			     ; ah = 0
    106	0147  B0 0D			     mov al, SYM_CR	     ; for scasb
    107
    108	0149			     qqCycle:
    109	0149  FE C4			     inc ah			     ; ++ah (new line)
    110
    111	014B  B1 50			     mov cl, WC_WIDTH	     ; set counter
    112	014D  F2> AE			     repne scasb		     ; while(es:[di++] != al &&	cl != 0)
    113
    114	014F  B2 50			     mov dl, WC_WIDTH	     ; dl = WC_WIDTH - cl
Turbo Assembler	 Version 4.1	    13/02/25 08:41:37	    Page 3
ramka.asm



    115	0151  2A D1			     sub dl, cl
    116	0153  E8 00C0			     call MinMax	     ; dh max= dl
    117
    118	0156  80 3D 0A			     cmp byte ptr [di],	SYM_LF
    119	0159  74 EE		     je	qqCycle
    120	015B  8A C6			     mov al, dh
    121
    122	015D  86 E0			     xchg ah, al
    123
    124	015F  C3			     ret
    125	0160			     endp
    126
    127				     ;---------------------------------------------
    128				     ;Descript:	     print small versions ramka	without	text up	to the present size
    129				     ;Entry:	     DI	= nine ramka's symbols
    130				     ;			     AH	= count	updrages
    131				     ;			     AL	= start	larger side size
    132				     ;REMARK:	     If	vertical size >	gorizontal size	=> swap	ah and al
    133				     ;			     DL	= end max side size
    134				     ;Exit:	     None
    135				     ;Destroy:	     AX	BX CX DX DI
    136				     ;---------------------------------------------
    137	0160			     ZoomRamka	     proc
    138
    139	0160  32 F6			     xor dh, dh				     ; counter = 0
    140	0162			     qqCycle:
    141	0162  50			     push ax
    142	0163  52			     push dx
    143	0164  57			     push di
    144
    145	0165  E8 006B			     call RamkaOffset
    146	0168  E8 0020			     call PrintRamka
    147
    148				     ;;; Pause
    149	016B  B4 86			     mov ah, 86h
    150	016D  B9 0001			     mov cx, HUNDRED_MSECONDS1
    151					     ; xor cx, cx
    152	0170  BA 86A0			     mov dx, HUNDRED_MSECONDS2
    153	0173  CD 15			     int 15h
    154
    155	0175  5F			     pop di
    156	0176  5A			     pop dx
    157	0177  58			     pop ax
    158
    159	0178  05 0101			     add ax, 101h		     ; ++al, ++ah
    160	017B  FE C6			     inc dh
    161	017D  3A F2			     cmp dh, dl
    162	017F  75 E1		     jne qqCycle
    163
    164	0181  C3			     ret
    165	0182			     endp
    166
    167				     ;---------------------------------------------
    168				     ;Descript:	     Print ramka with gap
    169				     ;Entry:	     AH	= max count symbols in text line
    170				     ;			     AL	= count	\n text
    171				     ;			     BX	= ramka	offset
Turbo Assembler	 Version 4.1	    13/02/25 08:41:37	    Page 4
ramka.asm



    172				     ;			     DI	= Start	nine char's types
    173				     ;			     ES	= Num segment
    174				     ;Exit:	     None
    175				     ;Destroy:	     CX	AX BX DI
    176				     ;---------------------------------------------
    177	0182			     PrintRamkaWithGap	     proc
    178	0182  80 C4 14			     add ah, 2*GC_RAMKA_GAP ; set count	non repeat symbols
    179	0185  04 05			     add al, 2*VC_RAMKA_GAP + 1
    180
    181	0187  E8 0001			     call PrintRamka
    182
    183	018A  C3			     ret
    184	018B			     endp
    185
    186				     ;---------------------------------------------
    187				     ;Descript:	     Print ramka
    188				     ;Entry:	     AH	= width	- 2
    189				     ;			     AL	= height - 2
    190				     ;			     BX	= ramka	offset
    191				     ;			     DI	= Start	nine char's types
    192				     ;			     ES	= Num segment
    193				     ;Exit:	     None
    194				     ;Destroy:	     CX	AL BX DI
    195				     ;---------------------------------------------
    196	018B			     PrintRamka	     proc
    197
    198	018B  53			     push bx
    199	018C  E8 0022			     call PrintLine
    200	018F  5B			     pop bx
    201
    202	0190  83 C7 03			     add di, 3 ; next triple symbols
    203	0193  84 C0			     test al, al
    204	0195  74 0F		     je	qqCycleEnd
    205	0197			     qqCycle:
    206	0197  81 C3 00A0		     add bx, WC_WIDTH*2	; next line
    207	019B  53			     push bx
    208	019C  E8 0012			     call PrintLine
    209	019F  5B			     pop bx
    210
    211	01A0  FE C8			     dec al
    212	01A2  84 C0			     test al, al
    213	01A4  75 F1		     jne qqCycle
    214	01A6			     qqCycleEnd:
    215
    216	01A6  83 C7 03			     add di, 3 ; next triple symbols
    217	01A9  81 C3 00A0		     add bx, WC_WIDTH*2	; next line
    218	01AD  E8 0001			     call PrintLine
    219
    220	01B0  C3			     ret
    221	01B1			     endp
    222
    223				     ;---------------------------------------------
    224				     ;Descript:	     Print line
    225				     ;Entry:	     AH	= count	non repeat symbols
    226				     ;			     BX	= Offset in segment for	start print
    227				     ;			     DI	= Start	three char's types
    228				     ;			     ES	= Num segment
Turbo Assembler	 Version 4.1	    13/02/25 08:41:37	    Page 5
ramka.asm



    229				     ;Exit:	     None
    230				     ;Destroy:	     CX	BX
    231				     ;---------------------------------------------
    232	01B1			     PrintLine	     proc
    233	01B1  8A 0D			     mov cl, byte ptr [di]
    234	01B3  26: 88 0F			     mov es:[bx], cl ; puts(di[0])
    235
    236	01B6  8A EC			     mov ch, ah	; for cycle
    237	01B8  0A ED			     or	ch, ch
    238	01BA  74 0F		     je	qqCycleEnd
    239	01BC			     qqCycle:
    240	01BC  83 C3 02			     add bx, 2
    241	01BF  8A 4D 01			     mov cl, byte ptr [di+1]
    242	01C2  26: 88 0F			     mov es:[bx], cl ; puts(di[0])
    243
    244	01C5  FE CD			     dec ch
    245	01C7  0A ED			     or	ch, ch
    246	01C9  75 F1		     jne qqCycle
    247	01CB			     qqCycleEnd:
    248
    249	01CB  8A 4D 02			     mov cl, byte ptr [di+2]
    250	01CE  26: 88 4F	02		     mov es:[bx+2], cl ; puts(di[0])
    251	01D2  C3			     ret
    252	01D3			     endp
    253
    254				     ;---------------------------------------------
    255				     ;Descript:	     Calculate ramka's offset
    256				     ;Entry:	     AH	= width
    257				     ;			     AL	= height
    258				     ;Exit:	     BX	= ramka's offset
    259				     ;Destroy:	     CX
    260				     ;---------------------------------------------
    261	01D3			     RamkaOffset     proc
    262
    263					     ; mov bx, WC_WIDTH	- (2*GC_RAMKA_GAP + 2) ;calculate gorizontal offset
    264	01D3  BB 0050			     mov bx, WC_WIDTH ;calculate gorizontal offset
    265	01D6  8A CC			     mov cl, ah
    266	01D8  32 ED			     xor ch, ch
    267	01DA  2B D9			     sub bx, cx
    268	01DC  81 E3 00FE		     and bx, 11111110b ; for chet
    269
    270					     ; mov cl, WC_HEIGHT - (2*VC_RAMKA_GAP + 2 + 1) + 3	;calculate vertical offset
    271	01E0  B1 19			     mov cl, WC_HEIGHT ;calculate vertical offset
    272	01E2  2A C8			     sub cl, al
    273	01E4  81 E1 00FE		     and cx, 11111110b ; for chet
    274	01E8  6B C9 50			     imul cx, WC_WIDTH
    275
    276	01EB  03 D9			     add bx, cx
    277
    278	01ED  C3			     ret
    279	01EE			     endp
    280
    281				     ;---------------------------------------------
    282				     ;Descript:	     print text	with 0 in end
    283				     ;Entry:	     BX	= ramka	offset
    284				     ;			     DI	= Start	text
    285				     ;Exit:	     None
Turbo Assembler	 Version 4.1	    13/02/25 08:41:37	    Page 6
ramka.asm



    286				     ;Destroy:	     DI, BX, CH, AX
    287				     ;---------------------------------------------
    288	01EE			     PrintText	     proc
    289	01EE  81 C3 01F6		     add bx, (VC_RAMKA_GAP + 1)*WC_WIDTH*2 + (GC_RAMKA_GAP+1)*2; add padding in	ramka
    290
    291	01F2  8B C3			     mov ax, bx
    292
    293	01F4			     qqCycle:
    294	01F4  8A 2D			     mov ch, byte ptr [di] ; remember
    295	01F6  84 ED			     test ch, ch ; check end
    296	01F8  74 1B		     je	qqCycleEnd
    297	01FA  80 FD 0D			     cmp ch, SYM_CR
    298	01FD  75 0D		     jne qqNoNewLine
    299	01FF  83 C7 02			     add di, 2 ; skip LF
    300
    301	0202  8B D8			     mov bx, ax
    302	0204  81 C3 00A0		     add bx, WC_WIDTH*2	; next print line
    303	0208  8B C3			     mov ax, bx
    304	020A  EB E8		     jmp qqCycle
    305	020C			     qqNoNewLine:
    306	020C  26: 88 2F			     mov es:[bx], ch ; puts(*di)
    307
    308	020F  83 C3 02			     add bx, 2
    309	0212  47			     inc di ; next symbol
    310	0213  EB DF		     jmp qqCycle
    311	0215			     qqCycleEnd:
    312
    313	0215  C3			     ret
    314	0216			     endp
    315
    316				     ;---------------------------------------------
    317				     ;Descript:	     Get Min
    318				     ;Entry:	     DL	= First
    319				     ;			     DH	= Second
    320				     ;Exit:	     DH	= MAX
    321				     ;			     DL	= MIN
    322				     ;Destroy:	     CH
    323				     ;---------------------------------------------
    324	0216			     MinMax  proc
    325	0216  3A D6			     cmp dl, dh
    326
    327	0218  7E 06		     jle qqSkipSwap
    328	021A  8A EA			     mov ch, dl
    329	021C  8A D6			     mov dl, dh
    330	021E  8A F5			     mov dh, ch
    331	0220			     qqSkipSwap:
    332
    333	0220  C3			     ret
    334	0221			     endp
    335
    336				     ;===================DATA======================
    337	0221			     .data
    338	0000  2B 2D 2B 7C 2E 7C	2B+  Vsymbols db '+-+|.|+-+'
    339	      2D 2B
    340	0009  53 77 65 61 74 20	46+  Vstring db	'Sweat February	14th Valentine!', SYM_CR, SYM_LF, \
    341	      65 62 72 75 61 72	79+			'Ded lox hihihi', SYM_CR, SYM_LF, \
    342	      20 31 34 74 68 20	56+			'Mne sosal Stepa Gizunov', SYM_CR, SYM_LF,\
Turbo Assembler	 Version 4.1	    13/02/25 08:41:37	    Page 7
ramka.asm



    343	      61 6C 65 6E 74 69	6E+			'Masik kupi mne	mashinku!!!', SYM_HEART, SYM_CR, \
    344	      65 21 0D 0A 44 65	64+			0h
    345	      20 6C 6F 78 20 68	69+
    346	      68 69 68 69 0D 0A	4D+
    347	      6E 65 20 73 6F 73	61+
    348	      6C 20 53 74 65 70	61+
    349	      20 47 69 7A 75 6E	6F+
    350	      76 0D 0A 4D 61 73	69+
    351	      6B 20 6B 75 70 69	20+
    352	      6D 6E 65 20 6D 61	73+
    353	      68 69 6E 6B 75 21	21+
    354	      21 03 0D 00
    355				     end Start
Turbo Assembler	 Version 4.1	    13/02/25 08:41:37	    Page 8
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "13/02/25"
??FILENAME			  Text	 "ramka	  "
??TIME				  Text	 "08:41:37"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMKA
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
COUNTTEXTSIZES			  Near	 DGROUP:0145
DEBUG_OFFSET			  Number 0370
GC_RAMKA_GAP			  Number 000A
HUNDRED_MSECONDS1		  Number 0001
HUNDRED_MSECONDS2		  Number 86A0
MINMAX				  Near	 DGROUP:0216
ONE_SECONDS1			  Number 000F
ONE_SECONDS2			  Number 4240
PRINTLINE			  Near	 DGROUP:01B1
PRINTRAMKA			  Near	 DGROUP:018B
PRINTRAMKAWITHGAP		  Near	 DGROUP:0182
PRINTTEXT			  Near	 DGROUP:01EE
QQCYCLE				  Near	 DGROUP:0149
QQCYCLE				  Near	 DGROUP:0162
QQCYCLE				  Near	 DGROUP:0197
QQCYCLE				  Near	 DGROUP:01BC
QQCYCLE				  Near	 DGROUP:01F4
QQCYCLEEND			  Near	 DGROUP:01A6
QQCYCLEEND			  Near	 DGROUP:01CB
QQCYCLEEND			  Near	 DGROUP:0215
QQDIDSWAP			  Near	 DGROUP:0124
QQENDDIDSWAP			  Near	 DGROUP:0128
QQNONEWLINE			  Near	 DGROUP:020C
QQSKIPSWAP			  Near	 DGROUP:0220
RAMKAOFFSET			  Near	 DGROUP:01D3
START				  Near	 DGROUP:0100
SYM_CR				  Number 000D
SYM_HEART			  Number 0003
SYM_LF				  Number 000A
TEN_MSECONDS			  Number 2710
TWO_SECONDS1			  Number 001E
TWO_SECONDS2			  Number 8480
VC_RAMKA_GAP			  Number 0002
VIDEOSEG			  Number B800
VSTRING				  Byte	 DGROUP:0009
VSYMBOLS			  Byte	 DGROUP:0000
WC_HEIGHT			  Number 0019
WC_WIDTH			  Number 0050
Turbo Assembler	 Version 4.1	    13/02/25 08:41:37	    Page 9
Symbol Table



ZOOMRAMKA			  Near	 DGROUP:0160

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  006F Word	  Public  DATA
  _TEXT				  16  0221 Word	  Public  CODE
