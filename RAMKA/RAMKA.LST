Turbo Assembler	 Version 4.1	    11/02/25 01:21:47	    Page 1
ramka.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .186
      4				     locals qq
      5				     org 100h
      6
      7				     ; ;-----------------DEBUG------------------------------
      8				     ;	     mov byte ptr es:[DEBUG_OFFSET], al
      9				     ;	     mov byte ptr es:[DEBUG_OFFSET+2], ah
     10				     ; ;-----------------DEBUG------------------------------
     11
     12	      =0370		     DEBUG_OFFSET	     equ 880
     13
     14				     ; Window
     15	      =B800		     VIDEOSEG			     equ 0b800h
     16	      =0050		     WC_WIDTH			     equ 80
     17	      =0019		     WC_HEIGHT			     equ 25
     18	      =000A		     GC_RAMKA_GAP	     equ 10
     19	      =0002		     VC_RAMKA_GAP	     equ 2
     20
     21				     ;Symbols
     22	      =000A		     SYM_LF			     equ 0ah
     23	      =000D		     SYM_CR			     equ 0dh
     24	      =0003		     SYM_HEART			     equ 03h
     25
     26				     ;Times
     27	      =001E		     TWO_SECONDS1	     equ 1eh
     28	      =8480		     TWO_SECONDS2	     equ 8480h
     29	      =000F		     ONE_SECONDS1	     equ 0fh
     30	      =4240		     ONE_SECONDS2	     equ 4240h
     31	      =0001		     HUNDRED_MSECONDS1	     equ 1h
     32	      =86A0		     HUNDRED_MSECONDS2	     equ 86A0h
     33	      =2710		     TEN_MSECONDS	     equ 2710h
     34
     35				     ;===================MAIN=========================
     36
     37	0100			     Start:
     38				     ;;; Set num videoseg segment
     39	0100  B9 B800			     mov cx, VIDEOSEG
     40	0103  8E C1			     mov es, cx
     41
     42				     ;;; AH = max count	symbols	in text	line
     43				     ;;; AL = count \n text
     44	0105  BF 0009r			     mov di, offset Vstring
     45	0108  E8 005A			     call CountTextSizes
     46
     47				     ;;; dh = |ah-al|, dl - min(ah, al)
     48	010B  8B D0			     mov dx, ax
     49	010D  80 C6 14			     add dh, GC_RAMKA_GAP*2
     50	0110  80 C2 04			     add dl, VC_RAMKA_GAP*2
     51	0113  E8 010F			     call MinMax
     52	0116  2A F2			     sub dh, dl
     53
     54				     ;;; Save text sizes
     55	0118  50			     push ax
     56
     57				     ;;; Set start ramka sizes in ah, al (min =	0)
Turbo Assembler	 Version 4.1	    11/02/25 01:21:47	    Page 2
ramka.asm



     58	0119  3A E0			     cmp ah, al
     59	011B  7C 07		     jl	qqDidSwap
     60	011D  8A E6			     mov ah, dh
     61	011F  32 C0			     xor al, al
     62	0121  EB 05 90		     jmp qqEndDidSwap
     63	0124			     qqDidSwap:
     64	0124  8A C6			     mov al, dh
     65	0126  32 E4			     xor ah, ah
     66	0128			     qqEndDidSwap:
     67
     68
     69	0128  BF 0000r			     mov di, offset Vsymbols
     70	012B  32 C9			     xor cl, cl	; counter
     71	012D			     qqZoomRamkaCycle:
     72	012D  50			     push ax
     73	012E  51			     push cx
     74	012F  52			     push dx
     75	0130  57			     push di
     76
     77	0131  E8 00AE			     call RamkaOffset
     78	0134  E8 0063			     call PrintRamka
     79
     80				     ;;; Pause
     81	0137  B4 86			     mov ah, 86h
     82	0139  B9 0001			     mov cx, HUNDRED_MSECONDS1
     83					     ; xor cx, cx
     84	013C  BA 86A0			     mov dx, HUNDRED_MSECONDS2
     85	013F  CD 15			     int 15h
     86
     87	0141  5F			     pop di
     88	0142  5A			     pop dx
     89	0143  59			     pop cx
     90	0144  58			     pop ax
     91
     92	0145  05 0101			     add ax, 101h ; inc	al, inc	ah
     93	0148  FE C1			     inc cl
     94	014A  3A CA			     cmp cl, dl
     95	014C  75 DF		     jne qqZoomRamkaCycle
     96
     97	014E  E8 0091			     call RamkaOffset
     98
     99				     ;;; Save text sizes
    100	0151  58			     pop ax
    101
    102	0152  53			     push bx
    103	0153  BF 0000r			     mov di, offset Vsymbols
    104	0156  E8 0038			     call PrintRamkaWithGap
    105	0159  5B			     pop bx
    106
    107	015A  BF 0009r			     mov di, offset Vstring
    108	015D  E8 009D			     call PrintText
    109
    110	0160  B8 4C00			     mov ax, 4c00h; end	programm
    111	0163  CD 21			     int 21h
    112
    113				     ;=====================FUNCS===================
    114
Turbo Assembler	 Version 4.1	    11/02/25 01:21:47	    Page 3
ramka.asm



    115				     ;---------------------------------------------
    116				     ;Descript:	     Count sizes of text with 0	in end
    117				     ;Entry:	     DI	= Start	text
    118				     ;Exit:	     AH	= max count symbols in text line
    119				     ;			     AL	= count	\n text
    120				     ;Destroy:	     DI, CX, DX
    121				     ;---------------------------------------------
    122	0165			     CountTextSizes  proc
    123	0165  33 C0			     xor ax, ax
    124	0167  33 C9			     xor cx, cx
    125
    126	0169			     qqCycle:
    127	0169  8A 0D			     mov cl, byte ptr [di] ; remember
    128	016B  80 F9 0D			     cmp cl, SYM_CR
    129	016E  75 0E		     jne qqNoNewLine
    130	0170  47			     inc di ; skip LF
    131
    132	0171  8A D4			     mov dl, ah; update	max ah
    133	0173  8A F5			     mov dh, ch
    134	0175  E8 00AD			     call MinMax
    135	0178  8A E6			     mov ah, dh
    136
    137	017A  32 ED			     xor ch, ch
    138
    139	017C  FE C0			     inc al ; ++count_\n
    140	017E			     qqNoNewLine:
    141	017E  84 C9			     test cl, cl ; is end of text equal	zero
    142	0180  74 05		     je	     qqCycleEnd
    143	0182  FE C5			     inc ch
    144	0184  47			     inc di
    145	0185  EB E2		     jmp     qqCycle
    146	0187			     qqCycleEnd:
    147
    148	0187  8A D4			     mov dl, ah; update	max ah
    149	0189  8A F5			     mov dh, ch
    150	018B  E8 0097			     call MinMax
    151	018E  8A E6			     mov ah, dh
    152
    153	0190  C3			     ret
    154	0191			     endp
    155
    156				     ;---------------------------------------------
    157				     ;Descript:	     Print ramka with gap
    158				     ;Entry:	     AH	= max count symbols in text line
    159				     ;			     AL	= count	\n text
    160				     ;			     BX	= ramka	offset
    161				     ;			     DI	= Start	nine char's types
    162				     ;			     ES	= Num segment
    163				     ;Exit:	     None
    164				     ;Destroy:	     CX	AX BX DI
    165				     ;---------------------------------------------
    166	0191			     PrintRamkaWithGap	     proc
    167	0191  80 C4 14			     add ah, 2*GC_RAMKA_GAP ; set count	non repeat symbols
    168	0194  04 05			     add al, 2*VC_RAMKA_GAP + 1
    169
    170	0196  E8 0001			     call PrintRamka
    171
Turbo Assembler	 Version 4.1	    11/02/25 01:21:47	    Page 4
ramka.asm



    172	0199  C3			     ret
    173	019A			     endp
    174
    175				     ;---------------------------------------------
    176				     ;Descript:	     Print ramka
    177				     ;Entry:	     AH	= width	- 2
    178				     ;			     AL	= height - 2
    179				     ;			     BX	= ramka	offset
    180				     ;			     DI	= Start	nine char's types
    181				     ;			     ES	= Num segment
    182				     ;Exit:	     None
    183				     ;Destroy:	     CX	AL BX DI
    184				     ;---------------------------------------------
    185	019A			     PrintRamka	     proc
    186
    187	019A  53			     push bx
    188	019B  E8 0022			     call PrintLine
    189	019E  5B			     pop bx
    190
    191	019F  83 C7 03			     add di, 3 ; next triple symbols
    192	01A2  84 C0			     test al, al
    193	01A4  74 0F		     je	qqCycleEnd
    194	01A6			     qqCycle:
    195	01A6  81 C3 00A0		     add bx, WC_WIDTH*2	; next line
    196	01AA  53			     push bx
    197	01AB  E8 0012			     call PrintLine
    198	01AE  5B			     pop bx
    199
    200	01AF  FE C8			     dec al
    201	01B1  84 C0			     test al, al
    202	01B3  75 F1		     jne qqCycle
    203	01B5			     qqCycleEnd:
    204
    205	01B5  83 C7 03			     add di, 3 ; next triple symbols
    206	01B8  81 C3 00A0		     add bx, WC_WIDTH*2	; next line
    207	01BC  E8 0001			     call PrintLine
    208
    209	01BF  C3			     ret
    210	01C0			     endp
    211
    212				     ;---------------------------------------------
    213				     ;Descript:	     Print line
    214				     ;Entry:	     AH	= count	non repeat symbols
    215				     ;			     BX	= Offset in segment for	start print
    216				     ;			     DI	= Start	three char's types
    217				     ;			     ES	= Num segment
    218				     ;Exit:	     None
    219				     ;Destroy:	     CX	BX
    220				     ;---------------------------------------------
    221	01C0			     PrintLine	     proc
    222	01C0  8A 0D			     mov cl, byte ptr [di]
    223	01C2  26: 88 0F			     mov es:[bx], cl ; puts(di[0])
    224
    225	01C5  8A EC			     mov ch, ah	; for cycle
    226	01C7  0A ED			     or	ch, ch
    227	01C9  74 0F		     je	qqCycleEnd
    228	01CB			     qqCycle:
Turbo Assembler	 Version 4.1	    11/02/25 01:21:47	    Page 5
ramka.asm



    229	01CB  83 C3 02			     add bx, 2
    230	01CE  8A 4D 01			     mov cl, byte ptr [di+1]
    231	01D1  26: 88 0F			     mov es:[bx], cl ; puts(di[0])
    232
    233	01D4  FE CD			     dec ch
    234	01D6  0A ED			     or	ch, ch
    235	01D8  75 F1		     jne qqCycle
    236	01DA			     qqCycleEnd:
    237
    238	01DA  8A 4D 02			     mov cl, byte ptr [di+2]
    239	01DD  26: 88 4F	02		     mov es:[bx+2], cl ; puts(di[0])
    240	01E1  C3			     ret
    241	01E2			     endp
    242
    243				     ;---------------------------------------------
    244				     ;Descript:	     Calculate ramka's offset
    245				     ;Entry:	     AH	= width
    246				     ;			     AL	= height
    247				     ;Exit:	     BX	= ramka's offset
    248				     ;Destroy:	     CX
    249				     ;---------------------------------------------
    250	01E2			     RamkaOffset     proc
    251
    252					     ; mov bx, WC_WIDTH	- (2*GC_RAMKA_GAP + 2) ;calculate gorizontal offset
    253	01E2  BB 0050			     mov bx, WC_WIDTH ;calculate gorizontal offset
    254	01E5  8A CC			     mov cl, ah
    255	01E7  32 ED			     xor ch, ch
    256	01E9  2B D9			     sub bx, cx
    257	01EB  81 E3 00FE		     and bx, 11111110b ; for chet
    258
    259					     ; mov cl, WC_HEIGHT - (2*VC_RAMKA_GAP + 2 + 1) + 3	;calculate vertical offset
    260	01EF  B1 19			     mov cl, WC_HEIGHT ;calculate vertical offset
    261	01F1  2A C8			     sub cl, al
    262	01F3  81 E1 00FE		     and cx, 11111110b ; for chet
    263	01F7  6B C9 50			     imul cx, WC_WIDTH
    264
    265	01FA  03 D9			     add bx, cx
    266
    267	01FC  C3			     ret
    268	01FD			     endp
    269
    270				     ;---------------------------------------------
    271				     ;Descript:	     print text	with 0 in end
    272				     ;Entry:	     BX	= ramka	offset
    273				     ;			     DI	= Start	text
    274				     ;Exit:	     None
    275				     ;Destroy:	     DI, BX, CH, AX
    276				     ;---------------------------------------------
    277	01FD			     PrintText	     proc
    278	01FD  81 C3 01F6		     add bx, (VC_RAMKA_GAP + 1)*WC_WIDTH*2 + (GC_RAMKA_GAP+1)*2; add padding in	ramka
    279
    280	0201  8B C3			     mov ax, bx
    281
    282	0203			     qqCycle:
    283	0203  8A 2D			     mov ch, byte ptr [di] ; remember
    284	0205  84 ED			     test ch, ch ; check end
    285	0207  74 1B		     je	qqCycleEnd
Turbo Assembler	 Version 4.1	    11/02/25 01:21:47	    Page 6
ramka.asm



    286	0209  80 FD 0D			     cmp ch, SYM_CR
    287	020C  75 0D		     jne qqNoNewLine
    288	020E  83 C7 02			     add di, 2 ; skip LF
    289
    290	0211  8B D8			     mov bx, ax
    291	0213  81 C3 00A0		     add bx, WC_WIDTH*2	; next print line
    292	0217  8B C3			     mov ax, bx
    293	0219  EB E8		     jmp qqCycle
    294	021B			     qqNoNewLine:
    295	021B  26: 88 2F			     mov es:[bx], ch ; puts(*di)
    296
    297	021E  83 C3 02			     add bx, 2
    298	0221  47			     inc di ; next symbol
    299	0222  EB DF		     jmp qqCycle
    300	0224			     qqCycleEnd:
    301
    302	0224  C3			     ret
    303	0225			     endp
    304
    305				     ;---------------------------------------------
    306				     ;Descript:	     Get Min
    307				     ;Entry:	     DL	= First
    308				     ;			     DH	= Second
    309				     ;Exit:	     DH	= MAX
    310				     ;			     DL	= MIN
    311				     ;Destroy:	     CH
    312				     ;---------------------------------------------
    313	0225			     MinMax  proc
    314	0225  3A D6			     cmp dl, dh
    315
    316	0227  7E 06		     jle qqSkipSwap
    317	0229  8A EA			     mov ch, dl
    318	022B  8A D6			     mov dl, dh
    319	022D  8A F5			     mov dh, ch
    320	022F			     qqSkipSwap:
    321
    322	022F  C3			     ret
    323	0230			     endp
    324
    325				     ;===================DATA======================
    326	0230			     .data
    327	0000  2B 2D 2B 7C 2E 7C	2B+  Vsymbols db '+-+|.|+-+'
    328	      2D 2B
    329	0009  53 77 65 61 74 20	46+  Vstring db	'Sweat February	14th Valentine!', SYM_CR, SYM_LF, \
    330	      65 62 72 75 61 72	79+			'Ded lox hihihi', SYM_CR, SYM_LF, \
    331	      20 31 34 74 68 20	56+			'Mne sosal Stepa Gizunov', SYM_CR, SYM_LF,\
    332	      61 6C 65 6E 74 69	6E+			'Masik kupi mne	mashinku!!!', SYM_HEART, \
    333	      65 21 0D 0A 44 65	64+			0h
    334	      20 6C 6F 78 20 68	69+
    335	      68 69 68 69 0D 0A	4D+
    336	      6E 65 20 73 6F 73	61+
    337	      6C 20 53 74 65 70	61+
    338	      20 47 69 7A 75 6E	6F+
    339	      76 0D 0A 4D 61 73	69+
    340	      6B 20 6B 75 70 69	20+
    341	      6D 6E 65 20 6D 61	73+
    342	      68 69 6E 6B 75 21	21+
Turbo Assembler	 Version 4.1	    11/02/25 01:21:47	    Page 7
ramka.asm



    343	      21 03 00
    344				     end Start
Turbo Assembler	 Version 4.1	    11/02/25 01:21:47	    Page 8
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "11/02/25"
??FILENAME			  Text	 "ramka	  "
??TIME				  Text	 "01:21:47"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMKA
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
COUNTTEXTSIZES			  Near	 DGROUP:0165
DEBUG_OFFSET			  Number 0370
GC_RAMKA_GAP			  Number 000A
HUNDRED_MSECONDS1		  Number 0001
HUNDRED_MSECONDS2		  Number 86A0
MINMAX				  Near	 DGROUP:0225
ONE_SECONDS1			  Number 000F
ONE_SECONDS2			  Number 4240
PRINTLINE			  Near	 DGROUP:01C0
PRINTRAMKA			  Near	 DGROUP:019A
PRINTRAMKAWITHGAP		  Near	 DGROUP:0191
PRINTTEXT			  Near	 DGROUP:01FD
QQCYCLE				  Near	 DGROUP:0169
QQCYCLE				  Near	 DGROUP:01A6
QQCYCLE				  Near	 DGROUP:01CB
QQCYCLE				  Near	 DGROUP:0203
QQCYCLEEND			  Near	 DGROUP:0187
QQCYCLEEND			  Near	 DGROUP:01B5
QQCYCLEEND			  Near	 DGROUP:01DA
QQCYCLEEND			  Near	 DGROUP:0224
QQDIDSWAP			  Near	 DGROUP:0124
QQENDDIDSWAP			  Near	 DGROUP:0128
QQNONEWLINE			  Near	 DGROUP:017E
QQNONEWLINE			  Near	 DGROUP:021B
QQSKIPSWAP			  Near	 DGROUP:022F
QQZOOMRAMKACYCLE		  Near	 DGROUP:012D
RAMKAOFFSET			  Near	 DGROUP:01E2
START				  Near	 DGROUP:0100
SYM_CR				  Number 000D
SYM_HEART			  Number 0003
SYM_LF				  Number 000A
TEN_MSECONDS			  Number 2710
TWO_SECONDS1			  Number 001E
TWO_SECONDS2			  Number 8480
VC_RAMKA_GAP			  Number 0002
VIDEOSEG			  Number B800
VSTRING				  Byte	 DGROUP:0009
VSYMBOLS			  Byte	 DGROUP:0000
Turbo Assembler	 Version 4.1	    11/02/25 01:21:47	    Page 9
Symbol Table



WC_HEIGHT			  Number 0019
WC_WIDTH			  Number 0050

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  006E Word	  Public  DATA
  _TEXT				  16  0230 Word	  Public  CODE
