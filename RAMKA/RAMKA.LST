Turbo Assembler	 Version 4.1	    06/02/25 00:41:46	    Page 1
ramka.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .186
      4				     org 100h
      5
      6	      =0370		     DEBUG_OFFSET    equ 880
      7
      8	      =B800		     VIDEOSEG		     equ 0b800h
      9	      =0050		     WC_WIDTH		     equ 80
     10	      =0019		     WC_HEIGHT		     equ 25
     11	      =000A		     GC_RAMKA_GAP    equ 10
     12	      =0002		     VC_RAMKA_GAP    equ 2
     13
     14	      =000A		     SYM_LF		     equ 0ah
     15	      =000D		     SYM_CR		     equ 0dh
     16
     17	0100			     Start:
     18	0100  B9 B800			     mov cx, VIDEOSEG
     19	0103  8E C1			     mov es, cx
     20
     21	0105  BF 0009r			     mov di, offset Vstring
     22	0108  E8 0047			     call CountTextSizes
     23
     24				     ;-----------------DEBUG------------------------------
     25	010B  26: A2 0370		     mov byte ptr es:[DEBUG_OFFSET], al
     26	010F  26: 88 26	0372		     mov byte ptr es:[DEBUG_OFFSET+2], ah
     27				     ;-----------------DEBUG------------------------------
     28
     29	0114  E8 008E			     call RamkaOffset ;	set in bx offset in segment
     30	0117  BF 0000r			     mov di, offset Vsymbols
     31	011A  53			     push bx
     32	011B  E8 0060			     call PrintRamka
     33	011E  5B			     pop bx
     34
     35	011F  BF 0009r			     mov di, offset Vstring
     36	0122  E8 0005			     call PrintText
     37
     38	0125  B8 4C00			     mov ax, 4c00h; end	programm
     39	0128  CD 21			     int 21h
     40
     41				     ;=====================FUNCS===================
     42
     43				     ;---------------------------------------------
     44				     ;Descript:	     print text	with 0 in end
     45				     ;Entry:	     BX	= ramka	offset
     46				     ;			     DI	= Start	text
     47				     ;Exit:	     None
     48				     ;Destroy:	     DI, BX, CH, AX
     49				     ;---------------------------------------------
     50	012A			     PrintText	     proc
     51	012A  81 C3 01F6		     add bx, (VC_RAMKA_GAP + 1)*WC_WIDTH*2 + (GC_RAMKA_GAP+1)*2; add padding in	ramka
     52
     53	012E  8B C3			     mov ax, bx
     54
     55	0130			     PrintText_Cycle:
     56	0130  8A 2D			     mov ch, byte ptr [di] ; remember
     57	0132  84 ED			     test ch, ch ; check end
Turbo Assembler	 Version 4.1	    06/02/25 00:41:46	    Page 2
ramka.asm



     58	0134  74 1B		     je	PrintText_CycleEnd
     59	0136  80 FD 0D			     cmp ch, SYM_CR
     60	0139  75 0D		     jne PrintText_NoNewLine
     61	013B  83 C7 02			     add di, 2 ; skip LF
     62
     63	013E  8B D8			     mov bx, ax
     64	0140  81 C3 00A0		     add bx, WC_WIDTH*2	; next print line
     65	0144  8B C3			     mov ax, bx
     66	0146  EB E8		     jmp PrintText_Cycle
     67	0148			     PrintText_NoNewLine:
     68	0148  26: 88 2F			     mov es:[bx], ch ; puts(*di)
     69
     70	014B  83 C3 02			     add bx, 2
     71	014E  47			     inc di ; next symbol
     72	014F  EB DF		     jmp PrintText_Cycle
     73	0151			     PrintText_CycleEnd:
     74
     75	0151  C3			     ret
     76	0152			     endp
     77
     78				     ;---------------------------------------------
     79				     ;Descript:	     Count sizes of text with 0	in end
     80				     ;Entry:	     DI	= Start	text
     81				     ;Exit:	     AH	= max count symbols in text line
     82				     ;			     AL	= count	\n text
     83				     ;Destroy:	     DI, CX, DX
     84				     ;---------------------------------------------
     85	0152			     CountTextSizes  proc
     86	0152  33 C0			     xor ax, ax
     87	0154  33 C9			     xor cx, cx
     88
     89	0156			     CountTextSizes_Cycle:
     90	0156  8A 0D			     mov cl, byte ptr [di] ; remember
     91	0158  80 F9 0D			     cmp cl, SYM_CR
     92	015B  75 0E		     jne CountTextSizes_NoNewLine
     93	015D  47			     inc di ; skip LF
     94
     95	015E  8A D4			     mov dl, ah; update	max ah
     96	0160  8A F5			     mov dh, ch
     97	0162  E8 007D			     call Max
     98	0165  8A E2			     mov ah, dl
     99
    100	0167  32 ED			     xor ch, ch
    101
    102	0169  FE C0			     inc al ; ++count_\n
    103	016B			     CountTextSizes_NoNewLine:
    104	016B  84 C9			     test cl, cl ; is end of text equal	zero
    105	016D  74 05		     je	     CountTextSizes_CycleEnd
    106	016F  FE C5			     inc ch
    107	0171  47			     inc di
    108	0172  EB E2		     jmp     CountTextSizes_Cycle
    109	0174			     CountTextSizes_CycleEnd:
    110
    111	0174  8A D4			     mov dl, ah; update	max ah
    112	0176  8A F5			     mov dh, ch
    113	0178  E8 0067			     call Max
    114	017B  8A E2			     mov ah, dl
Turbo Assembler	 Version 4.1	    06/02/25 00:41:46	    Page 3
ramka.asm



    115
    116	017D  C3			     ret
    117	017E			     endp
    118
    119				     ;---------------------------------------------
    120				     ;Descript:	     Print ramka
    121				     ;Entry:	     AH	= max count symbols in text line
    122				     ;			     AL	= count	\n text
    123				     ;			     BX	= ramka	offset
    124				     ;			     DI	= Start	nine char's types
    125				     ;			     ES	= Num segment
    126				     ;Exit:	     None
    127				     ;Destroy:	     CX	AX BX
    128				     ;---------------------------------------------
    129	017E			     PrintRamka	     proc
    130	017E  80 C4 14			     add ah, 2*GC_RAMKA_GAP ; set count	non repeat symbols
    131
    132	0181  53			     push bx
    133	0182  E8 003B			     call PrintLine
    134	0185  5B			     pop bx
    135
    136	0186  83 C7 03			     add di, 3 ; next triple symbols
    137	0189  04 05			     add al, 2*VC_RAMKA_GAP + 1
    138	018B			     PrintRamka_Cycle:
    139
    140	018B  81 C3 00A0		     add bx, WC_WIDTH*2	; next line
    141	018F  53			     push bx
    142	0190  E8 002D			     call PrintLine
    143	0193  5B			     pop bx
    144
    145	0194  FE C8			     dec al
    146	0196  0A C0			     or	al, al
    147	0198  75 F1		     jne PrintRamka_Cycle
    148
    149	019A  83 C7 03			     add di, 3 ; next triple symbols
    150	019D  81 C3 00A0		     add bx, WC_WIDTH*2	; next line
    151	01A1  E8 001C			     call PrintLine
    152
    153	01A4  C3			     ret
    154	01A5			     endp
    155
    156				     ;---------------------------------------------
    157				     ;Descript:	     Calculate ramka's offset
    158				     ;Entry:	     AH	= max count symbols in text line
    159				     ;			     AL= count \n text
    160				     ;Exit:	     BX	= ramka's offset
    161				     ;Destroy:	     CX
    162				     ;---------------------------------------------
    163	01A5			     RamkaOffset     proc
    164
    165	01A5  BB 003A			     mov bx, WC_WIDTH -	(2*GC_RAMKA_GAP	+ 2) ;calculate	gorizontal offset
    166	01A8  8A CC			     mov cl, ah
    167	01AA  32 ED			     xor ch, ch
    168	01AC  2B D9			     sub bx, cx
    169	01AE  81 E3 00FE		     and bx, 11111110b ; for chet
    170
    171	01B2  B1 15			     mov cl, WC_HEIGHT - (2*VC_RAMKA_GAP + 2 + 1) + 3 ;calculate vertical offset
Turbo Assembler	 Version 4.1	    06/02/25 00:41:46	    Page 4
ramka.asm



    172	01B4  2A C8			     sub cl, al
    173	01B6  81 E1 00FE		     and cx, 11111110b ; for chet
    174	01BA  6B C9 50			     imul cx, WC_WIDTH
    175
    176	01BD  03 D9			     add bx, cx
    177
    178	01BF  C3			     ret
    179	01C0			     endp
    180				     ;---------------------------------------------
    181				     ;Descript:	     Print line
    182				     ;Entry:	     AH	= count	non repeat symbols
    183				     ;			     BX	= Offset in segment for	start print
    184				     ;			     DI	= Start	three char's types
    185				     ;			     ES	= Num segment
    186				     ;Exit:	     None
    187				     ;Destroy:	     CX	BX
    188				     ;---------------------------------------------
    189	01C0			     PrintLine	     proc
    190	01C0  8A 0D			     mov cl, byte ptr [di]
    191	01C2  26: 88 0F			     mov es:[bx], cl ; puts(di[0])
    192
    193	01C5  8A EC			     mov ch, ah	; for cycle
    194	01C7  0A ED			     or	ch, ch
    195	01C9  74 0F		     je	PrintLine_CycleEnd
    196	01CB			     PrintLine_Cycle:
    197	01CB  83 C3 02			     add bx, 2
    198	01CE  8A 4D 01			     mov cl, byte ptr [di+1]
    199	01D1  26: 88 0F			     mov es:[bx], cl ; puts(di[0])
    200
    201	01D4  FE CD			     dec ch
    202	01D6  0A ED			     or	ch, ch
    203	01D8  75 F1		     jne PrintLine_Cycle
    204	01DA			     PrintLine_CycleEnd:
    205
    206	01DA  8A 4D 02			     mov cl, byte ptr [di+2]
    207	01DD  26: 88 4F	02		     mov es:[bx+2], cl ; puts(di[0])
    208	01E1  C3			     ret
    209	01E2			     endp
    210
    211				     ;---------------------------------------------
    212				     ;Descript:	     Get Max
    213				     ;Entry:	     DL	= First
    214				     ;			     DH	= Second
    215				     ;Exit:	     DL	= MAX
    216				     ;Destroy:	     None
    217				     ;---------------------------------------------
    218	01E2			     Max     proc
    219	01E2  3A D6			     cmp dl, dh
    220
    221	01E4  7D 02		     jge Max_SkipSwap
    222	01E6  8A D6			     mov dl, dh
    223	01E8			     Max_SkipSwap:
    224
    225	01E8  32 F6			     xor dh, dh
    226
    227	01EA  C3			     ret
    228	01EB			     endp
Turbo Assembler	 Version 4.1	    06/02/25 00:41:46	    Page 5
ramka.asm



    229
    230				     ;===================DATA======================
    231	01EB			     .data
    232	0000  2B 2D 2B 7C 2E 7C	2B+  Vsymbols db '+-+|.|+-+'
    233	      2D 2B
    234	0009  53 77 65 61 74 20	46+  Vstring db	'Sweat February	14th Valentine!', SYM_CR, SYM_LF, 'Ded lox hihihi', SYM_CR, SYM_LF, +
    235	      65 62 72 75 61 72	79+  'Mne sosal	Stepa Gizunov',	0h
    236	      20 31 34 74 68 20	56+
    237	      61 6C 65 6E 74 69	6E+
    238	      65 21 0D 0A 44 65	64+
    239	      20 6C 6F 78 20 68	69+
    240	      68 69 68 69 0D 0A	4D+
    241	      6E 65 20 73 6F 73	61+
    242	      6C 20 53 74 65 70	61+
    243	      20 47 69 7A 75 6E	6F+
    244	      76 00
    245				     end Start
Turbo Assembler	 Version 4.1	    06/02/25 00:41:46	    Page 6
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "06/02/25"
??FILENAME			  Text	 "ramka	  "
??TIME				  Text	 "00:41:46"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMKA
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
COUNTTEXTSIZES			  Near	 DGROUP:0152
COUNTTEXTSIZES_CYCLE		  Near	 DGROUP:0156
COUNTTEXTSIZES_CYCLEEND		  Near	 DGROUP:0174
COUNTTEXTSIZES_NONEWLINE	  Near	 DGROUP:016B
DEBUG_OFFSET			  Number 0370
GC_RAMKA_GAP			  Number 000A
MAX				  Near	 DGROUP:01E2
MAX_SKIPSWAP			  Near	 DGROUP:01E8
PRINTLINE			  Near	 DGROUP:01C0
PRINTLINE_CYCLE			  Near	 DGROUP:01CB
PRINTLINE_CYCLEEND		  Near	 DGROUP:01DA
PRINTRAMKA			  Near	 DGROUP:017E
PRINTRAMKA_CYCLE		  Near	 DGROUP:018B
PRINTTEXT			  Near	 DGROUP:012A
PRINTTEXT_CYCLE			  Near	 DGROUP:0130
PRINTTEXT_CYCLEEND		  Near	 DGROUP:0151
PRINTTEXT_NONEWLINE		  Near	 DGROUP:0148
RAMKAOFFSET			  Near	 DGROUP:01A5
START				  Near	 DGROUP:0100
SYM_CR				  Number 000D
SYM_LF				  Number 000A
VC_RAMKA_GAP			  Number 0002
VIDEOSEG			  Number B800
VSTRING				  Byte	 DGROUP:0009
VSYMBOLS			  Byte	 DGROUP:0000
WC_HEIGHT			  Number 0019
WC_WIDTH			  Number 0050

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0051 Word	  Public  DATA
  _TEXT				  16  01EB Word	  Public  CODE
