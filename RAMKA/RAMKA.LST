Turbo Assembler	 Version 4.1	    16/02/25 15:08:52	    Page 1
ramka.asm



      1	0000			     .model tiny
      2	0000			     .code
      3				     .186
      4				     locals qq
      5				     org 100h
      6
      7				     ; ;-----------------DEBUG------------------------------
      8				     ;	     mov byte ptr es:[DEBUG_OFFSET], al
      9				     ;	     mov byte ptr es:[DEBUG_OFFSET+2], ah
     10				     ; ;-----------------DEBUG------------------------------
     11
     12	      =0370		     DEBUG_OFFSET	     equ 880
     13
     14				     ; Window
     15	      =B800		     VIDEOSEG			     equ 0b800h
     16	      =0050		     WC_WIDTH			     equ 80
     17	      =0019		     WC_HEIGHT			     equ 25
     18	      =0004		     GC_RAMKA_GAP	     equ 4
     19	      =0002		     VC_RAMKA_GAP	     equ 2
     20
     21				     ;Symbols
     22	      =000A		     SYM_LF			     equ 0ah
     23	      =000D		     SYM_CR			     equ 0dh
     24	      =0003		     SYM_HEART			     equ 03h
     25
     26				     ;Times
     27	      =001E		     TWO_SECONDS1	     equ 1eh
     28	      =8480		     TWO_SECONDS2	     equ 8480h
     29	      =000F		     ONE_SECONDS1	     equ 0fh
     30	      =4240		     ONE_SECONDS2	     equ 4240h
     31	      =0001		     HUNDRED_MSECONDS1	     equ 1h
     32	      =86A0		     HUNDRED_MSECONDS2	     equ 86A0h
     33	      =2710		     TEN_MSECONDS	     equ 2710h
     34
     35				     ;===================MAIN=========================
     36
     37	0100			     Start:
     38				     ;;; AH = max count	symbols	in text	line
     39				     ;;; AL = count \n text
     40	0100  BF 0009r			     mov di, offset Vstring
     41	0103  E8 003F			     call CountTextSizes
     42
     43				     ;;; Set num videoseg segment
     44	0106  B9 B800			     mov cx, VIDEOSEG
     45	0109  8E C1			     mov es, cx
     46
     47				     ;;; dh = |ah-al|, dl = min(ah, al)
     48	010B  8B D0			     mov dx, ax
     49	010D  80 C6 08			     add dh, GC_RAMKA_GAP*2
     50	0110  80 C2 04			     add dl, VC_RAMKA_GAP*2
     51	0113  E8 0106			     call MinMax
     52	0116  2A F2			     sub dh, dl
     53
     54				     ;;; Save text sizes
     55	0118  50			     push ax
     56
     57				     ;;; Set start ramka sizes in ah, al (min =	0)
Turbo Assembler	 Version 4.1	    16/02/25 15:08:52	    Page 2
ramka.asm



     58	0119  3A E0			     cmp ah, al
     59	011B  7C 07		     jl	qqDidSwap
     60	011D  8A E6			     mov ah, dh
     61	011F  32 C0			     xor al, al
     62	0121  EB 05 90		     jmp qqEndDidSwap
     63	0124			     qqDidSwap:
     64	0124  8A C6			     mov al, dh
     65	0126  32 E4			     xor ah, ah
     66	0128			     qqEndDidSwap:
     67
     68	0128  BF 0000r			     mov di, offset Vsymbols
     69	012B  E8 0038			     call ZoomRamka
     70
     71	012E  E8 00A8			     call RamkaOffset
     72
     73				     ;;; Save text sizes
     74	0131  58			     pop ax
     75
     76	0132  53			     push bx
     77	0133  BF 0000r			     mov di, offset Vsymbols
     78	0136  E8 004F			     call PrintRamkaWithGap
     79	0139  5B			     pop bx
     80
     81	013A  BF 0009r			     mov di, offset Vstring
     82	013D  E8 00B4			     call PrintText
     83
     84	0140  B8 4C00			     mov ax, 4c00h; end	programm
     85	0143  CD 21			     int 21h
     86
     87				     ;=====================FUNCS===================
     88
     89				     ;---------------------------------------------
     90				     ;Descript:	     Count sizes of text with 0	in end
     91				     ;Entry:	     ES:DI = Start text
     92				     ;Exit:	     AH	= max count symbols in text line
     93				     ;			     AL	= count	text line
     94				     ;			     fill string_sizes
     95				     ;Destroy:	     DI, CX, DX, BX
     96				     ;---------------------------------------------
     97	0145			     CountTextSizes  proc
     98
     99				     ;	     al	- sym
    100				     ;	     cl	- counter
    101				     ;	     dl	- new val in minmax
    102				     ;	     dh	- max
    103				     ;	     ah	- count	text line
    104
    105	0145  32 E4			     xor ah, ah			     ; ah = 0
    106	0147  B0 0D			     mov al, SYM_CR	     ; for scasb
    107
    108	0149			     qqCycle:
    109	0149  FE C4			     inc ah			     ; ++ah (new line)
    110
    111	014B  B1 50			     mov cl, WC_WIDTH	     ; set counter
    112	014D  F2> AE			     repne scasb		     ; while(es:[di++] != al &&	cl != 0)
    113
    114	014F  B2 4F			     mov dl, WC_WIDTH -	1; dl =	WC_WIDTH - cl
Turbo Assembler	 Version 4.1	    16/02/25 15:08:52	    Page 3
ramka.asm



    115	0151  2A D1			     sub dl, cl
    116
    117				     ;;; string_sizes[ah-1] = dl
    118	0153  8A DC			     mov bl, ah
    119	0155  81 C3 006Fr		     add bx, offset StringSizes
    120
    121	0159  E8 00C0			     call MinMax	     ; dh max= dl
    122
    123	015C  80 3D 0A			     cmp byte ptr [di],	SYM_LF
    124	015F  74 E8		     je	qqCycle
    125
    126	0161  8A C6			     mov al, dh
    127	0163  86 E0			     xchg ah, al ;\\TODO - FIXME
    128	0165  C3			     ret
    129	0166			     endp
    130
    131				     ;---------------------------------------------
    132				     ;Descript:	     print small versions ramka	without	text up	to the present size
    133				     ;Entry:	     DI	= nine ramka's symbols
    134				     ;			     AH	= count	updrages
    135				     ;			     AL	= start	larger side size
    136				     ;REMARK:	     If	vertical size >	gorizontal size	=> swap	ah and al
    137				     ;			     DL	= end max side size
    138				     ;Exit:	     None
    139				     ;Destroy:	     AX	BX CX DX DI
    140				     ;---------------------------------------------
    141	0166			     ZoomRamka	     proc
    142
    143	0166  32 F6			     xor dh, dh				     ; counter = 0
    144	0168			     qqCycle:
    145	0168  50			     push ax
    146	0169  52			     push dx
    147	016A  57			     push di
    148
    149	016B  E8 006B			     call RamkaOffset
    150	016E  E8 0020			     call PrintRamka
    151
    152				     ;;; Pause
    153	0171  B4 86			     mov ah, 86h
    154	0173  B9 0001			     mov cx, HUNDRED_MSECONDS1
    155					     ; xor cx, cx
    156	0176  BA 86A0			     mov dx, HUNDRED_MSECONDS2
    157	0179  CD 15			     int 15h
    158
    159	017B  5F			     pop di
    160	017C  5A			     pop dx
    161	017D  58			     pop ax
    162
    163	017E  05 0101			     add ax, 101h		     ; ++al, ++ah
    164	0181  FE C6			     inc dh
    165	0183  3A F2			     cmp dh, dl
    166	0185  75 E1		     jne qqCycle
    167
    168	0187  C3			     ret
    169	0188			     endp
    170
    171				     ;---------------------------------------------
Turbo Assembler	 Version 4.1	    16/02/25 15:08:52	    Page 4
ramka.asm



    172				     ;Descript:	     Print ramka with gap
    173				     ;Entry:	     AH	= max count symbols in text line
    174				     ;			     AL	= count	\n text
    175				     ;			     BX	= ramka	offset
    176				     ;			     DI	= Start	nine char's types
    177				     ;			     ES	= Num segment
    178				     ;Exit:	     None
    179				     ;Destroy:	     CX	AX BX DI
    180				     ;---------------------------------------------
    181	0188			     PrintRamkaWithGap	     proc
    182	0188  80 C4 08			     add ah, 2*GC_RAMKA_GAP ; set count	non repeat symbols
    183	018B  04 05			     add al, 2*VC_RAMKA_GAP + 1
    184
    185	018D  E8 0001			     call PrintRamka
    186
    187	0190  C3			     ret
    188	0191			     endp
    189
    190				     ;---------------------------------------------
    191				     ;Descript:	     Print ramka
    192				     ;Entry:	     AH	= width	- 2
    193				     ;			     AL	= height - 2
    194				     ;			     BX	= ramka	offset
    195				     ;			     DI	= Start	nine char's types
    196				     ;			     ES	= Num segment
    197				     ;Exit:	     None
    198				     ;Destroy:	     CX	AL BX DI
    199				     ;---------------------------------------------
    200	0191			     PrintRamka	     proc
    201
    202	0191  53			     push bx
    203	0192  E8 0022			     call PrintLine
    204	0195  5B			     pop bx
    205
    206	0196  83 C7 03			     add di, 3 ; next triple symbols
    207	0199  84 C0			     test al, al
    208	019B  74 0F		     je	qqCycleEnd
    209	019D			     qqCycle:
    210	019D  81 C3 00A0		     add bx, WC_WIDTH*2	; next line
    211	01A1  53			     push bx
    212	01A2  E8 0012			     call PrintLine
    213	01A5  5B			     pop bx
    214
    215	01A6  FE C8			     dec al
    216	01A8  84 C0			     test al, al
    217	01AA  75 F1		     jne qqCycle
    218	01AC			     qqCycleEnd:
    219
    220	01AC  83 C7 03			     add di, 3 ; next triple symbols
    221	01AF  81 C3 00A0		     add bx, WC_WIDTH*2	; next line
    222	01B3  E8 0001			     call PrintLine
    223
    224	01B6  C3			     ret
    225	01B7			     endp
    226
    227				     ;---------------------------------------------
    228				     ;Descript:	     Print line
Turbo Assembler	 Version 4.1	    16/02/25 15:08:52	    Page 5
ramka.asm



    229				     ;Entry:	     AH	= count	non repeat symbols
    230				     ;			     BX	= Offset in segment for	start print
    231				     ;			     DI	= Start	three char's types
    232				     ;			     ES	= Num segment
    233				     ;Exit:	     None
    234				     ;Destroy:	     CX	BX
    235				     ;---------------------------------------------
    236	01B7			     PrintLine	     proc
    237	01B7  8A 0D			     mov cl, byte ptr [di]
    238	01B9  26: 88 0F			     mov es:[bx], cl ; puts(di[0])
    239
    240	01BC  8A EC			     mov ch, ah	; for cycle
    241	01BE  0A ED			     or	ch, ch
    242	01C0  74 0F		     je	qqCycleEnd
    243	01C2			     qqCycle:
    244	01C2  83 C3 02			     add bx, 2
    245	01C5  8A 4D 01			     mov cl, byte ptr [di+1]
    246	01C8  26: 88 0F			     mov es:[bx], cl ; puts(di[0])
    247
    248	01CB  FE CD			     dec ch
    249	01CD  0A ED			     or	ch, ch
    250	01CF  75 F1		     jne qqCycle
    251	01D1			     qqCycleEnd:
    252
    253	01D1  8A 4D 02			     mov cl, byte ptr [di+2]
    254	01D4  26: 88 4F	02		     mov es:[bx+2], cl ; puts(di[0])
    255	01D8  C3			     ret
    256	01D9			     endp
    257
    258				     ;---------------------------------------------
    259				     ;Descript:	     Calculate ramka's offset
    260				     ;Entry:	     AH	= width
    261				     ;			     AL	= height
    262				     ;Exit:	     BX	= ramka's offset
    263				     ;Destroy:	     CX
    264				     ;---------------------------------------------
    265	01D9			     RamkaOffset     proc
    266
    267					     ; mov bx, WC_WIDTH	- (2*GC_RAMKA_GAP + 2) ;calculate gorizontal offset
    268	01D9  BB 0050			     mov bx, WC_WIDTH ;calculate gorizontal offset
    269	01DC  8A CC			     mov cl, ah
    270	01DE  32 ED			     xor ch, ch
    271	01E0  2B D9			     sub bx, cx
    272	01E2  81 E3 00FE		     and bx, 11111110b ; for chet
    273
    274					     ; mov cl, WC_HEIGHT - (2*VC_RAMKA_GAP + 2 + 1) + 3	;calculate vertical offset
    275	01E6  B1 19			     mov cl, WC_HEIGHT ;calculate vertical offset
    276	01E8  2A C8			     sub cl, al
    277	01EA  81 E1 00FE		     and cx, 11111110b ; for chet
    278	01EE  6B C9 50			     imul cx, WC_WIDTH
    279
    280	01F1  03 D9			     add bx, cx
    281
    282	01F3  C3			     ret
    283	01F4			     endp
    284
    285				     ;---------------------------------------------
Turbo Assembler	 Version 4.1	    16/02/25 15:08:52	    Page 6
ramka.asm



    286				     ;Descript:	     print text	with 0 in end
    287				     ;Entry:	     BX	= ramka	offset
    288				     ;			     DI	= Start	text
    289				     ;Exit:	     None
    290				     ;Destroy:	     DI, BX, CH, AX
    291				     ;---------------------------------------------
    292	01F4			     PrintText	     proc
    293	01F4  81 C3 01EA		     add bx, (VC_RAMKA_GAP + 1)*WC_WIDTH*2 + (GC_RAMKA_GAP+1)*2; add padding in	ramka
    294
    295	01F8  8B C3			     mov ax, bx
    296
    297	01FA			     qqCycle:
    298	01FA  8A 2D			     mov ch, byte ptr [di] ; remember
    299	01FC  84 ED			     test ch, ch ; check end
    300	01FE  74 1B		     je	qqCycleEnd
    301	0200  80 FD 0D			     cmp ch, SYM_CR
    302	0203  75 0D		     jne qqNoNewLine
    303	0205  83 C7 02			     add di, 2 ; skip LF
    304
    305	0208  8B D8			     mov bx, ax
    306	020A  81 C3 00A0		     add bx, WC_WIDTH*2	; next print line
    307	020E  8B C3			     mov ax, bx
    308	0210  EB E8		     jmp qqCycle
    309	0212			     qqNoNewLine:
    310	0212  26: 88 2F			     mov es:[bx], ch ; puts(*di)
    311
    312	0215  83 C3 02			     add bx, 2
    313	0218  47			     inc di ; next symbol
    314	0219  EB DF		     jmp qqCycle
    315	021B			     qqCycleEnd:
    316
    317	021B  C3			     ret
    318	021C			     endp
    319
    320				     ;---------------------------------------------
    321				     ;Descript:	     Get Min
    322				     ;Entry:	     DL	= First
    323				     ;			     DH	= Second
    324				     ;Exit:	     DH	= MAX
    325				     ;			     DL	= MIN
    326				     ;Destroy:	     CH
    327				     ;---------------------------------------------
    328	021C			     MinMax  proc
    329	021C  3A D6			     cmp dl, dh
    330
    331	021E  7E 06		     jle qqSkipSwap
    332	0220  8A EA			     mov ch, dl
    333	0222  8A D6			     mov dl, dh
    334	0224  8A F5			     mov dh, ch
    335	0226			     qqSkipSwap:
    336
    337	0226  C3			     ret
    338	0227			     endp
    339
    340				     ;===================DATA======================
    341	0227			     .data
    342	0000  2B 2D 2B 7C 2E 7C	2B+  Vsymbols db '+-+|.|+-+'
Turbo Assembler	 Version 4.1	    16/02/25 15:08:52	    Page 7
ramka.asm



    343	      2D 2B
    344	0009  53 77 65 61 74 20	46+  Vstring db	     'Sweat February 14th Valentine!', SYM_CR, SYM_LF, \
    345	      65 62 72 75 61 72	79+			'Ded lox hihihi', SYM_CR, SYM_LF, \
    346	      20 31 34 74 68 20	56+			'Mne sosal Stepa Gizunov', SYM_CR, SYM_LF,\
    347	      61 6C 65 6E 74 69	6E+			'Masik kupi mne	mashinku!!!', SYM_HEART, SYM_CR, \
    348	      65 21 0D 0A 44 65	64+			0h
    349	      20 6C 6F 78 20 68	69+
    350	      68 69 68 69 0D 0A	4D+
    351	      6E 65 20 73 6F 73	61+
    352	      6C 20 53 74 65 70	61+
    353	      20 47 69 7A 75 6E	6F+
    354	      76 0D 0A 4D 61 73	69+
    355	      6B 20 6B 75 70 69	20+
    356	      6D 6E 65 20 6D 61	73+
    357	      68 69 6E 6B 75 21	21+
    358	      21 03 0D 00
    359	006F			     StringSizes:
    360				     end Start
Turbo Assembler	 Version 4.1	    16/02/25 15:08:52	    Page 8
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "16/02/25"
??FILENAME			  Text	 "ramka	  "
??TIME				  Text	 "15:08:52"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0103H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 RAMKA
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
COUNTTEXTSIZES			  Near	 DGROUP:0145
DEBUG_OFFSET			  Number 0370
GC_RAMKA_GAP			  Number 0004
HUNDRED_MSECONDS1		  Number 0001
HUNDRED_MSECONDS2		  Number 86A0
MINMAX				  Near	 DGROUP:021C
ONE_SECONDS1			  Number 000F
ONE_SECONDS2			  Number 4240
PRINTLINE			  Near	 DGROUP:01B7
PRINTRAMKA			  Near	 DGROUP:0191
PRINTRAMKAWITHGAP		  Near	 DGROUP:0188
PRINTTEXT			  Near	 DGROUP:01F4
QQCYCLE				  Near	 DGROUP:0149
QQCYCLE				  Near	 DGROUP:0168
QQCYCLE				  Near	 DGROUP:019D
QQCYCLE				  Near	 DGROUP:01C2
QQCYCLE				  Near	 DGROUP:01FA
QQCYCLEEND			  Near	 DGROUP:01AC
QQCYCLEEND			  Near	 DGROUP:01D1
QQCYCLEEND			  Near	 DGROUP:021B
QQDIDSWAP			  Near	 DGROUP:0124
QQENDDIDSWAP			  Near	 DGROUP:0128
QQNONEWLINE			  Near	 DGROUP:0212
QQSKIPSWAP			  Near	 DGROUP:0226
RAMKAOFFSET			  Near	 DGROUP:01D9
START				  Near	 DGROUP:0100
STRINGSIZES			  Near	 DGROUP:006F
SYM_CR				  Number 000D
SYM_HEART			  Number 0003
SYM_LF				  Number 000A
TEN_MSECONDS			  Number 2710
TWO_SECONDS1			  Number 001E
TWO_SECONDS2			  Number 8480
VC_RAMKA_GAP			  Number 0002
VIDEOSEG			  Number B800
VSTRING				  Byte	 DGROUP:0009
VSYMBOLS			  Byte	 DGROUP:0000
WC_HEIGHT			  Number 0019
Turbo Assembler	 Version 4.1	    16/02/25 15:08:52	    Page 9
Symbol Table



WC_WIDTH			  Number 0050
ZOOMRAMKA			  Near	 DGROUP:0166

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  006F Word	  Public  DATA
  _TEXT				  16  0227 Word	  Public  CODE
